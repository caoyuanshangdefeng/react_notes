组件之间的通信
    一、todoList-case
        1.拆分组件、实现静态组件，注意：className、style的写法
        2.动态初始化组件列表，如果确定将数据放在哪个组件的state中
            某个组件使用：放在共自身的state中
            某些组件使用：放在他们共同的父组件state中(官方称此操作为:状态提升)
        3.关于父子组件通信:
            1.[父组件]给[子组件]传递数据: 通过props传递
            2.[子组件]给[父组件]传递数据:通过props传递,要求父提前给子传递一个函数
        4.注意defaultChecked和checked的区别,类似的还有:default和value
        5.状态在哪里,操作状态的方法就在哪里


    请求数据
        ajax:xhr XMLHttpRequest()
        jQuery:$.get(...);需要函数沟通;对xhr的封装
        axios:对xhr的封装
        fetch:与xhr一样

    二、搜索case
        1.设计状态时需要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办

        2.ES6知识点
            let odj = {a : {b :1}}
            const {a} = obj ;//传统解构赋值
            const {a :{b}} = obj ; //连续解构赋值
            const {a : {b : value}} = obj ; //连续解构赋值+重命名

        3.消息订阅与发布机制
            1.先订阅,再发布(理解:有一种隔空对话的感觉)
            2.适用于任意组件间通信
            3.要在组件的componentWillUnmount中取消订阅
        4.fetch发送请求(关注分离的设计思想)
        try {
            const response=await fetch(`/api1/search/user2?q={keyWord}`)
            const data = await response.json()
            console.log(data)
        } catch (error){
            console.log('请求出错',error)
        }






Redux
文档
    英文文档:https://redux.js.org
    中文文档:http://www.redux.org.cn/
redux是什么
    1.redux是一个专门用于做状态管理的JS库(不是react插件库)
    2.可以用在react,angular,vue等项目中,但基本与react配合使用
    3.作用:集中式管理react应用中多个组件共享的状态

什么情况下需要使用redux
    1.某个组件的状态,需要让其他组件可以随时拿到
    2.一个组件需要改变另一个组件的状态(通信)
    3.总体原则:能不用就不用,如果不用比较吃力才考虑使用

redux流程图原理
    1.React Components (客人)
        React Components------>Action Creators(do what? 做什么?)


    2.Action Creators (服务员)

    3.Action Creators------>(Store) dispatch(action) 
        action:1.type:'things type',2.data:'things data'
        dispatch(action):action包含动作类型,动作对象;
        dispatch分发,函数;

    4.Store------> (Reducers)previousState,action 类似饭店的老板; (老板)
        store:商店,存储;指挥所调度
        previousState:之前的状态,初始为undefined;第二次做加工状态

    5.Reducers---> (Store) retrurn newState ,store给reducer安排任务 (后厨)

redux的三个核心概念
    1 action 
        1.动作的对象,
        2.包含两个属性:
            type : 标识属性,值为字符串,唯一,必要属性
            data : 数据属性,值类型任意,可选属性

        3.sample : {type : 'ADD_STUDENT',data : {name:'zhangsan',age:50}}

    2 Reducer
        1. 用于初始化状态,加工状态
        2. 加工时,根据旧的state和action,产生新的state的纯函数

    3 store
        1.将State,action,reducer联系在一起的对象
        2.如何得到此对象
            1.import {createStore} from 'redux'
            2.import reducer from './reducers'
            3.const store = createStore(reducer)

        3.此对象的功能
            1.getStore() : 得到state
            2.dispatch(action) : 分发action,触发reducer调用,产生新的state
            3.subscribe(listener):注册监听,当产生了新的state时,自动调用
            
新建文件叫redux
先写C位的store
store.getState()获取状态

action在同步时是对象,异步时是函数实质里面也是


一.求和案例redux精简版
    (1).去除Count组件自身的状态

    (2).src下建立:
    -redux
        -store.js
        -count_reducer.js

    (3).store.js 
        1).引入redux中的createStore函数,创建一个store
        2).createStore调用时需要传入一个为服务的reducer
        3).记得暴露store对象

    (4).count_reducer.js
        1).reducer的本质是一个函数,接收:preState,action,返回加工后的状态
        2).reducer有两个作用:初始化状态,加工状态
        3).reducer被第一次调用时,是store自动触发的
            传递的perState是undefined
            传递的action是{type:'@@REDUX/INIT_a.2.b.2}
    (5).在index.js中监测store中状态的变化,一旦发生改变重新渲染<App/>
        备注:redux只负责管理状态,至于状态的改变驱动着页面的展示,要靠我们自己

完整版比精简版多了两个文件
补一个Action Creators,每个组件都有自己的action creater 

二.求和案例_redux文件
新增文件
    1.count_action.js专门用于创建action对象
    2.constant.js 放置容易写错的type值

三.求和案例异步action

    action 类别:js的Obj {} 对象;还可以是function对象
    函数类型的action是异步的action
    原有的方法是把等放在了组件对象,现在把等放在了Action Creator 
    """
    Uncaught Error: Actions must be plain objects. Instead, the actual type was: 'function'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions.
    未捕获的错误：操作必须是普通对象。 相反，实际类型是：'function'。 您可能需要将中间件添加到您的商店设置中以处理调度其他值，例如“redux-thunk”来处理调度函数。
    """
    (1).明确:延迟的动作不想交给组件自身,想交给action
    (2).何时需要异步action:想要对状态进行操作,但是具体的数据靠异步任务返回
    (3).具体编码:
        1).yarm add redux-thunk/npm install redux-thunk;并配置在store中
        2).创建action的函数不在返回一般对象,而是一个函数,该函数中写异步任务
        3).异步任务有结果后,分发一个同步的action去真正操作数据
    (4).备注:异步action不是必须要写的,完全可以自己等待异步任务的结果了再去分发同步action




react-redux模型图
    1.所有的UI组件都应该包裹着一个容器组件,他们是父子关系
    2.容器组件是真正和redux打交道的,里面可以随意使用redux的api
    3.UI 组件中不能使用任何redux的api
    4.容器组件会传给UI组件:(1).redux中所保存的状态.(2).用于操作状态的方法
    5.备注:容器给UI传递:状态、操作状态的方法,均通过props传递


UI组件 
容器组件 


4.求和案例react-redux基本使用
    (1).明确两个概念:
        1).UI 组件不能使用任何redux的api,只负责页面的呈现、交互等
        2).容器组件:负责和redux通信,将结果交给UI组件
    (2).如何创建一个容器组件---靠react-redux的connect函数
        connect(mapStateToProps,mapDispatchToProps)(UI组件)
        -mapStateToProps:映射状态,返回值是一个对象
        -mapDispatchToProps:映射操作状态的方法,返回值是一个对象
    (3).备注:容器组件中的store是靠props传进去的,而不是在容器组件中直接引入
    (4).备注:mapDispatchToProps也可以是一个对象

5.求和案例react-redux优化

    (1).容器组件和UI组件整合为一个文件
    (2).无需自己给容器传递store,给<App/>包裹一个<Provider store={store}>即可
    (3).使用了react-redux后也不用再自己检测redux中状态的改变了,容器组件可以自动完成这个工作
    (4).mapDispatchToProps也可以简单的写成一个对象
    (5).一个组件要和redux打交道需要经过几步?
        1).定义好UI组件---不暴露
        2).引入connect生成一个容器组件,并暴露,写法如下:
            connect(
                state=>({key:value}),//映射状态
                {key:xxxxxxAction} //映射操作状态的方法

            )(UI组件)

        3).在UI组件中通过this.props.xxxxxxxx读取和操作状态





















React的setState是异步更新





















