组件之间的通信
    一、todoList-case
        1.拆分组件、实现静态组件，注意：className、style的写法
        2.动态初始化组件列表，如果确定将数据放在哪个组件的state中
            某个组件使用：放在共自身的state中
            某些组件使用：放在他们共同的父组件state中(官方称此操作为:状态提升)
        3.关于父子组件通信:
            1.[父组件]给[子组件]传递数据: 通过props传递
            2.[子组件]给[父组件]传递数据:通过props传递,要求父提前给子传递一个函数
        4.注意defaultChecked和checked的区别,类似的还有:default和value
        5.状态在哪里,操作状态的方法就在哪里


    请求数据
        ajax:xhr XMLHttpRequest()
        jQuery:$.get(...);需要函数沟通;对xhr的封装
        axios:对xhr的封装
        fetch:与xhr一样

    二、搜索case
        1.设计状态时需要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办

        2.ES6知识点
            let odj = {a : {b :1}}
            const {a} = obj ;//传统解构赋值
            const {a :{b}} = obj ; //连续解构赋值
            const {a : {b : value}} = obj ; //连续解构赋值+重命名

        3.消息订阅与发布机制
            1.先订阅,再发布(理解:有一种隔空对话的感觉)
            2.适用于任意组件间通信
            3.要在组件的componentWillUnmount中取消订阅
        4.fetch发送请求(关注分离的设计思想)
        try {
            const response=await fetch(`/api1/search/user2?q={keyWord}`)
            const data = await response.json()
            console.log(data)
        } catch (error){
            console.log('请求出错',error)
        }






Redux
文档
    英文文档:https://redux.js.org
    中文文档:http://www.redux.org.cn/
redux是什么
    1.redux是一个专门用于做状态管理的JS库(不是react插件库)
    2.可以用在react,angular,vue等项目中,但基本与react配合使用
    3.作用:集中式管理react应用中多个组件共享的状态

什么情况下需要使用redux
    1.某个组件的状态,需要让其他组件可以随时拿到
    2.一个组件需要改变另一个组件的状态(通信)
    3.总体原则:能不用就不用,如果不用比较吃力才考虑使用

redux流程图原理
    1.React Components (客人)
        React Components------>Action Creators(do what? 做什么?)


    2.Action Creators (服务员)

    3.Action Creators------>(Store) dispatch(action) 
        action:1.type:'things type',2.data:'things data'
        dispatch(action):action包含动作类型,动作对象;
        dispatch分发,函数;

    4.Store------> (Reducers)previousState,action 类似饭店的老板; (老板)
        store:商店,存储;指挥所调度
        previousState:之前的状态,初始为undefined;第二次做加工状态

    5.Reducers---> (Store) retrurn newState ,store给reducer安排任务 (后厨)

redux的三个核心概念
    1 action 
        1.动作的对象,
        2.包含两个属性:
            type : 标识属性,值为字符串,唯一,必要属性
            data : 数据属性,值类型任意,可选属性

        3.sample : {type : 'ADD_STUDENT',data : {name:'zhangsan',age:50}}

    2 Reducer
        1. 用于初始化状态,加工状态
        2. 加工时,根据旧的state和action,产生新的state的纯函数

    3 store
        1.将State,action,reducer联系在一起的对象
        2.如何得到此对象
            1.import {createStore} from 'redux'
            2.import reducer from './reducers'
            3.const store = createStore(reducer)

        3.此对象的功能
            1.getStore() : 得到state
            2.dispatch(action) : 分发action,触发reducer调用,产生新的state
            3.subscribe(listener):注册监听,当产生了新的state时,自动调用
            















